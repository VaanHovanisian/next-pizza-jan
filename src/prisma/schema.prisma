generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  fullName         String
  password         String
  role             UserRole          @default(USER)
  verified         DateTime?
  provider         String?
  providerId       String?
  cart             Cart?
  verificationCode VerificationCode?
  order            Order[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Cart {
  id          Int           @id @default(autoincrement())
  user        User?         @relation(fields: [userId], references: [id])
  userId      Int?          @unique
  token       String
  products    CartProduct[]
  totalAmount Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model CartProduct {
  id          Int          @id @default(autoincrement())
  quantity    Int          @default(1)
  ingredients Ingredient[]
  cart        Cart         @relation(fields: [cartId], references: [id])
  cartId      Int
  variant     Variation    @relation(fields: [variantid], references: [id])
  variantid   Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  imgUrl      String
  ingredients Ingredient[]

  variants Variation[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Ingredient {
  id           Int           @id @default(autoincrement())
  products     Product[]
  cartProducts CartProduct[]
  name         String
  imgUrl       String
  price        Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  paymentId   String?
  fullName    String
  email       String
  address     String
  phone       String
  comment     String?
  token       String
  user        User?       @relation(fields: [userId], references: [id])
  userId      Int?
  status      OrderStatus
  totalAmount Int         @default(0)
  items       Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Variation {
  id Int @id @default(autoincrement())

  size         Int?
  pizzaType    Int?
  price        Int
  product      Product       @relation(fields: [productId], references: [id])
  productId    Int
  cartProducts CartProduct[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  code      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  SUCCESS
  CANCELED
}
